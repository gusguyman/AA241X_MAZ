function vars = Init(steps, num_targets, max_targets)
%% accelerations
    a = struct('N', zeros(1,steps), ...
        'E', zeros(1,steps), ...
        'D', zeros(1,steps), ...
        'U', zeros(1,steps), ...
        'V', zeros(1,steps), ...
        'W', zeros(1,steps));
    
    a.N(1) = 0;
    a.E(1) = 0;
    a.D(1) = 0;
    a.U(1) = 0;
    a.V(1) = 0;
    a.W(1) = 0;
%% velocities
    v = struct('N', zeros(1,steps), ...
        'E', zeros(1,steps), ...
        'D', zeros(1,steps), ...
        'U', zeros(1,steps), ...
        'U_desired',15 * ones(1,steps), ...
        'V', zeros(1,steps), ...
        'W', zeros(1,steps));
    
    v.N(1) = 15;
    v.E(1) = 0;
    v.D(1) = 0;
    v.U(1) = 15;
    v.V(1) = 0;
    v.W(1) = 0;
%% positions   
    pos = struct('N', zeros(1,steps), ...
        'E', zeros(1,steps), ...
        'D', zeros(1,steps), ...
        'N_desired', zeros(1,steps), ...
        'E_desired', zeros(1,steps));

    pos.N(1) = 0;
    pos.E(1) = 0;
    pos.D(1) = -100;
%% targets    
    targets = struct('N', zeros(1,num_targets), ...
        'E', zeros(1,num_targets), ...
        'r', zeros(1,num_targets), ...
        'N_total', zeros(1,max_targets), ...
        'E_total', zeros(1,max_targets), ...
        'r_total', zeros(1,max_targets), ...
        'idx', 1, ...
        'turning', 0, ...
        'count', 0);
    
    targets.N(1:3) = [100, 100, 200];
    targets.E(1:3) = [-100, 100, 0];
%     pos.N_targets(1:3) = [100, 200, 100];
%     pos.E_targets(1:3) = [-100, 0, 100];
%     pos.N_targets(1:3) = [200, 100, 100];
%     pos.E_targets(1:3) = [0, -100, 100];

    pos.N_desired(1:3) = targets.N(1);
    pos.E_desired(1:3) = targets.E(1);
    targets.r(1:3) = [5, 10, 5];
%% principal axes (Roll, Pitch, Yaw)
    axes = struct('roll',  zeros(1,steps), ...
        'pitch', zeros(1,steps), ...
        'yaw', zeros(1,steps), ...
        'p', zeros(1,steps), ...
        'q', zeros(1,steps), ...
        'r', zeros(1,steps), ...
        'roll_rate', zeros(1,steps), ...
        'pitch_rate', zeros(1,steps), ...
        'yaw_rate', zeros(1,steps), ...
        'roll_a', zeros(1,steps), ...
        'pitch_a', zeros(1,steps), ...
        'yaw_a', zeros(1,steps), ...
        'roll_desired', zeros(1,steps), ...
        'pitch_desired', zeros(1,steps), ...
        'yaw_desired', zeros(1,steps));
    
    axes.roll(1) = 15;
    axes.roll_rate(1) = 0;
    axes.roll_a(1) = 0;
    axes.roll_desired(1) = 0;
    axes.pitch(1) = 0;
    axes.pitch_rate(1) = 0;
    axes.pitch_a(1) = 0;
    axes.pitch_desired(1) = 0;
    axes.yaw(1) = atan2d(v.E(1), v.N(1));
    axes.yaw_rate(1) = 0;
    axes.yaw_a(1) = 0;
    axes.yaw_desired(1) = 0;
 %% bounds of flight area  
    bounds = struct('w', 150, ... %m
        'h', 400, ...%m
        'x_ll', 0, ... %X coord of lower left corner
        'y_ll', 0, ...
        'boundary_padding', 10, ...
        'aircraft_padding', 3, ...
        'max_r', 10, ...
        'min_r', 5); %Y coord of lower left corner
 %% aircraft params   
    aircraft = struct(...
        'mass', .800, ... %g
        'W', 9.81 * .800, ... %kg,
        'span', 0.736, ... %m
        'chord', 0.091, ... %m
        'area', 0.091, ... %m^2
        'AOA', 0,...
        'AR', 6);
%% forces
    forces = struct('W', zeros(1,steps), ...
        'L', zeros(1,steps), ...
        'D', zeros(1,steps), ...
        'T', zeros(1,steps));
    
    forces.W(1) = aircraft.mass * 9.81; %N
    forces.L(1) = aircraft.mass * 9.81; %N
    forces.T(1) = 5; %N
    forces.D(1) = 0.2; %N
%% outputs
    outputs = struct(...
        'elevator', zeros(1,steps), ...
        'aileron', zeros(1,steps), ...
        'rudder', zeros(1,steps), ...
        'throttle', ones(1,steps));
    
%% gains
    gains = struct();
    gains.yaw = struct(...
        'kp', 1, ...
        'ki', 0, ...
        'kd', 0);
    gains.pitch = struct(...
        'kp', 1, ...
        'ki', 0, ...
        'kd', 0);
    gains.roll = struct(...
        'kp', 1, ...
        'ki', 0, ...
        'kd', 0);
    gains.alt = struct(...
        'kp', -5, ...
        'ki', 0, ...
        'kd', 0);
    gains.heading = struct(...
        'kp', 1, ...
        'ki', 0, ...
        'kd', 0);
    gains.speed = struct(...
        'kp', 1, ...
        'ki', 0, ...
        'kd', 0);
    
    %Bundle it all together in one struct 
    vars = struct('a', a, ...
        'v', v, ...
        'pos', pos, ...
        'axes', axes, ...
        'forces', forces,...
        'bounds', bounds, ...
        'targets', targets, ...
        'aircraft', aircraft, ...
        'outputs', outputs, ...
        'gains', gains, ...
        't', zeros(1,steps));
end